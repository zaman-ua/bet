{% extends 'index.layout.html.twig' %}

{% block title %}Login title{% endblock %}


{% block body %}
    <section class="content">
        <h1>Login</h1>

        <form method="POST" action="/users/login" class="form">
            <input class="input" type="hidden" name="csrf" value="{{ csrf_token() }}" />

            <input class="input" type="text" name="data[login]" id="data-login" placeholder="login" value="{{ old.data.login }}"/>
            {% if errors.login %} {{ errors.login }} {% endif %}

            <input class="input" type="password" name="data[password]" id="data-password" placeholder="password" value="{{ old.data.password }}"/>
            {% if errors.password %} {{ errors.password }} {% endif %}

            <input type="hidden" name="data[remember_me]" value="0">
            <input class="input" type="checkbox" name="data[remember_me]"
                 id="data-remember-me" value="1" {% if old.data.remember_me %}checked{% endif %} />
            <label for="data-remember-me">remember_me</label>

            <input class="btn" type="submit" value="Login" />
        </form>
    </section>
{% endblock %}


{% block javascripts %}
    <script>
        $(function () {
            $(document).on('submit', '.form', function (e) {
                e.preventDefault();

                const $form = $(this);
                const $btn  = $form.find('input[type=submit],button[type=submit]');
                const action = $form.attr('action') || window.location.pathname;
                const method = ($form.attr('method') || 'POST').toUpperCase();

                // очистим предыдущие ошибки
                $form.find('.field-error').remove();
                $form.find('.is-invalid').removeClass('is-invalid');

                $btn.prop('disabled', true);

                $.ajax({
                    url: action,
                    method: method,
                    data: $form.serialize(),              // работает с data[login] и пр.
                    dataType: 'json',                     // ждём JSON
                    headers: {
                        'X-Requested-With': 'XMLHttpRequest',
                        'Accept': 'application/json'
                    },
                    success: function (resp, status, xhr) {
                        if (resp?.ok) {
                            // успех — редирект или сообщение
                            window.location = resp.redirect || '/';
                            return;
                        }
                        if (resp?.errors) {
                            renderErrors($form, resp.errors);
                            return;
                        }
                        // если сервер вернул HTML вместо JSON — заменим форму (fallback)
                        if (xhr.getResponseHeader('Content-Type')?.includes('text/html')) {
                            $form.replaceWith(resp);
                        }
                    },
                    error: function (xhr) {
                        if (xhr.status === 422) {
                            // валидация: { errors: { field: "message", ... } }
                            const json = xhr.responseJSON || {};
                            renderErrors($form, json.errors || {});
                        } else {
                            alert('Ошибка сервера. Попробуйте позже.');
                        }
                    },
                    complete: function () {
                        $btn.prop('disabled', false);
                    }
                });
            });

            function renderErrors($form, errors) {
                // errors: { login: '...', password: '...', ... }
                for (const [field, message] of Object.entries(errors)) {
                    // для полей вида data[login] → найдём по name
                    const selector = `[name="data[${field}]"]`;
                    const $input = $form.find(selector);
                    if ($input.length) {
                        $input.addClass('is-invalid')
                            .after(`<div class="field-error" style="color:#c00;font-size:12px;margin-top:4px;">${escapeHtml(message)}</div>`);
                    } else {
                        // общий блок вверху, если поле не найдено
                        $form.prepend(`<div class="field-error" style="color:#c00;margin-bottom:8px;">${escapeHtml(message)}</div>`);
                    }
                }
            }

            function escapeHtml(str) {
                return String(str ?? '').replace(/[&<>"']/g, s => ({
                    '&':'&amp;','<':'&lt;','>':'&gt;','"':'&quot;',"'":'&#039;'
                })[s]);
            }
        });

        $(function () {
            const $list = $('#contacts-list');
            const $tpl  = $('#contact-template');

            $('#add-contact').on('click', function () {
                const next = $list.find('.contact-row').length;
                const html = $tpl.html().replaceAll('__INDEX__', String(next));
                $list.append(html);
            });

            $list.on('click', '.btn-remove', function () {
                if ($list.find('.contact-row').length <= 1) return; // минимум 1 строка
                $(this).closest('.contact-row').remove();
                renumber(); // чтобы индексы шли 0..N подряд
            });

            function renumber() {
                $list.find('.contact-row').each(function (idx) {
                    $(this).attr('data-index', idx);
                    $(this).find('select').attr({
                        name: `contacts[${idx}][type]`,
                        id:   `contacts-${idx}-type`
                    });
                    $(this).find('input[type="text"]').attr({
                        name: `contacts[${idx}][value]`,
                        id:   `contacts-${idx}-value`
                    });
                });
            }
        });
    </script>
{% endblock %}